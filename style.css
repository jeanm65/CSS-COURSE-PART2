:root {
  /* les variables css*/
  --color1: #ede4d8;
  --color2: teal;
  --color3: #303b4b;
  --color4: rgb(18, 19, 19);
}
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
h1 {
  margin-bottom: 24px;
  position: relative;
  padding: 10px;
}
h1:after {
  /*il faut que son parent h1 est en position relative pour que ceci marche, si non, notre barre va se trouver tout en bas de notre element card, au lieu de h1*/
  content: "";
  position: absolute;
  background: var(--color2);
  height: 1px;
  width: 100%;
  bottom: -14px;
  left: 50%; /*la barre est centré par rapport à son coin supérieur gauche, pour palier à cela, on ajoute le transform en bas pour le centrer parfaitement notre barre*/
  transform: translateX(-50%) scaleX(0);
  animation: h1anim 10s ease-in-out forwards; /*ease-in-out veut dire que l'animation est un peu peut lente au début et à la fin, forwards veut dire qu'on veut que l'animation reste dans son état final */
  transform-origin: right; /*ici, on veut que l'animation part de droite mais elle peut egalement se faire de gauche */
}
@keyframes h1anim {
  100% {
    transform: translateX(-50%) scaleX(1);
  }
}

body {
  background: url(./img/nature.jpg) center/cover;
  height: 100vh;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  color: var(--color1);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden; /* avec overflow: hidden, Tout ce qui sort du body sera caché (comme notre vaisseau en mouvement qu'on va voir à la fin) */
}
.card {
  background: rgba(0, 0, 0, 0.507);
  width: calc(
    100% - 25px
  ); /*la methode calc() permet de faire des calculs. Ici, je veut que ma largeur soit 100% de la fênetre mais garder quand même 50px des côtés */
  padding: 20px 2opx 6px; /*20px haut 20px gauche-droite 6px bas*/
  box-shadow: 0 2px 5px rgba(65, 47, 47, 0.555);
  border-radius: 5px;
  backdrop-filter: blur(
    5px
  ); /*ceci donne un aspect flu du background du .card*/
}
.card:before {
  /*before est un pseudo-element */
  content: "\2730"; /*cet étoile sera juste placé avant le titre h1*/ /* les paramètres content et position absolute sont obligatoires dans les pseudoclass before ou after même si content est vide, sinon votre before ou after ne marcheront pas*/
  position: absolute;
  top: 0px;
  right: 20px;
  font-size: 2.4rem;
}
h1 {
  margin-bottom: 24px;
}
.grid-container {
  display: grid;
  grid-template-columns: 20% 80% /* pour la première enfant (polygone) et la deuxième enfant (texte)*/;
}
.polygon-container {
  filter: drop-shadow(
    -1px 10px 3px var(--color2)
  ); /*ici on créee un ombre pour le polygone mais pour faire cela, on doit passer par son parent.*/

  /*mettre le parent en grid
  place-self: center right; */
}

.polygon {
  /*pour faire des formes quelconques de polygones etc, on peut visiter le site: https://bennettfeely.com/clippy/*/
  /* un generateur de gradient est aussi: cssgradient.io, webgradient.com,
   background: linear-gradient(.......)*/
  clip-path: polygon(
    50% 0%,
    100% 50%,
    50% 100%,
    0% 50%
  ); /*ceci était recupéré au niveau du site bennettfeely*/
  background: linear-gradient(135deg, var(--color2) 0%, var(--color1) 100%);
  height: 100px;
  position: relative;
}
.polygon:after {
  content: "Un texte";
  position: absolute;
  color: var(--color2);
  background: var(--color4);
  top: 50%;
  left: 50%;
  /*ici, le texte est centré par rapport à son coin supérieur gauche à notre polygone, pour corriger cela:*/
  transform: translate(
    -50%,
    -50%
  ); /*et là le texte est bien centré, ici, on peut également faire une rotation du texte comme: rotate(344deg), une bonne pratique pour le rotate est d'utiliser l'outil dans l'inspecteur de chrome et de juste effectuer la rotation comme celle de box-shadow.*/
  padding: 4px;
  width: 100%;
  text-align: center;
}
p {
  line-height: 26px; /*Ecartement entre les lignes des textes*/
  margin: 20px auto;
  /*ici, essayons de limiter le nombre de ligne de texte à 4 :*/
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 4;
  overflow: hidden; /*permet de cacher le reste du texte qui dépasse les 4 lignes */
  text-align: justify; /*cela justifie l'alignement vertical gauche et droite du texte*/
}
p::selection {
  /*On peut changer la couleur du texte selectionné en utilisant ce propriété*/
  background: var(
    --color2
  ); /*Ici, le background du texte selectionné devient pink*/
  color: var(--color3);
}
.checkbox-container {
  display: flex;
  justify-content: space-around;
  margin: 20px 0 30px; /*20px haut 0px gauche et droite 30px bas*/
  perspective: 40px;
}
input[type="checkbox"]:checked {
  display: none; /*quand on checked le input, ce input disparait*/
}
input[type="checkbox"]:checked + label {
  background: var(--color2);
  color: var(--color3);
  transition: 0.2s;
  transform: scale(1.1); /*apres click, le texte grossit*/
  filter: brightness(120%) /*blur(0.9px)*/;
}
label {
  cursor: pointer;
  border: 1px solid var(--color1);
  background: var(--color3);
  padding: 10px;
  border-radius: 5px;
  user-select: none; /*on remarque egalement que nos labels option1 option2 option3 sont clickable et ça ce n'est pas bon. Pour resoudre cela, on va ajouter à notre class label: user-select: none;*/
}
label:first-of-type:hover {
  /*first-of-type veut dire que quand la première fois que tu vois un label.....*/
  animation: label1 1s infinite linear; /*linear peut être remplacé par alternate*/ /*avec infinite, l'animation va toujours se poursuivre quand le curseur reste sur le label, et çà continue de façon linéaire*/
}
@keyframes label1 {
  50% {
    transform: scale(1.2);
  }
  100% {
    transform: scale(1);
  }
}

/* animation 3D: Ne pas oublier le perspective sur le parent (ici checkbox-container*/
label:nth-child(4):hover {
  /* ici on applique l'effet sur le label 4ème enfant quand survole (hover) ce label */
  animation: label2 3s infinite
    /* on peut ajouter aussi linear derrière infinite */;
}
@keyframes label2 {
  33% {
    transform: translateZ(30px);
  }
  66% {
    transform: translateZ(-40px);
  }
  100% {
    transform: translateZ(0);
  }
}
/*l'attribut filter: visiter le site cssgenerator.org */
.e-mail {
  text-align: center;
  margin-bottom: 20px;
}
.e-mail input {
  padding: 10px;
  border-radius: 5px;
  outline: none;
  border: 3px solid transparent /*au lieu de none*/;
  transition: 0.3s;
  text-align: center;
  font-size: 1.1rem;
  color: var(--color2);
  min-width: 150px; /*on veut qu'ici, notre input s'étende de 15px au min quand la fenetre est trop petit*/
  width: 35%;
  max-width: 300px; /*on veut qu'ici, notre input s'étende de 300px au max*/
  /*en faisant ces 3 reglages de width, on a plus besoin de faire le media query*/
}

/***********PSEUDOCLASSE: FOCUS, PLACEHOLDER, etc**************/
input[type="text"]:focus {
  background: transparent; /*quand on focus sur le mail, le background devient transparent*/
  border: 3px solid var(--color2); /*ici, on remarque que notre border s'étend un peu et affecte les autres élements,,pou;r resoudre cela, nous allons ajouter à notre class .e-mail input un border 3px solid transparent au lieu de none */
  border-radius: 150px;
}
input[type="text"]::placeholder {
  /*ici, on peut modifier les propriétés d'un placeholder*/
  color: var(--color2);
  font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;
  /*on peut tout faire.............*/
}
/*on remarque egalement que nos labels option1 option2 option3 sont clickable et ça ce n'est pas bon. Pour resoudre cela, on va ajouter à notre class label: user-select: none; (voir plus haut)*/

/******travaillons sur notre boutton valider***********/
button {
  cursor: pointer;
  background: var(--color2);
  border: none;
  font-size: 1.3rem;
  padding: 10px 20px;
  border-radius: 150px;
  margin: 0 auto; /*ici, il ne se centre pas encore, car son display est inline-block à l'origine, pour pouvoir le centrer, changeons le display: block*/
  display: block;
  transition: 0.4s;
}
button:hover {
  letter-spacing: 3px;
  /*transition: 0.4s;*/ /*si on met cette transition ici, elle va s'appliquer seulement en entrer mais pas en sortie, pour resoudre cela, plaçons toujours la transition dans le classe principal button*/
}
button:active {
  /*cet effet est très important car cela donne une impression au visiteur qu'il a déja clicker sur le button. Ici, le button grandit quand on le clique*/
  transform: scale(1.2);
  background: #ff0000;
}
button:hover + a,
a:hover {
  opacity: 1;
  transform: translateY(0);
  visibility: visible;
}
a {
  color: var(--color2);
  text-decoration: none;
  text-align: center; /*ceci ne suffit pas pour centrer le lien, il faut changer son display original (inline-block) en block : */
  display: block;
  opacity: 0.4;
  transform: translateY(
    20px
  ); /*ces deux propriétés opacity et transform vont rendre notre lien plus flou et le deplacer plus en bas, mais, ajoutons un petit effet: quand on survol notre botton valider, ce lien va se remettre à ses propriétés normales : voir 
  plus haut dans button:hover + a { */
  visibility: hidden; /*ceci permet d'éviter des bugs, mais plus haut dans a:hover, on a rendu sa visibility visible*/
}
/*Apres que notre est lien est visité, elle va automatiquement changer de couleur, et peut également modifier ce comportement : */
a:visited {
  color: var(--color1);
}
img {
  /*faire bouger notre vaisseau partout dans notre page*/
  height: 40px; /*on diminue la taille de notre vaisseau*/
  position: absolute;
  filter: drop-shadow(0px 6px 3px rgba(255, 255, 0, 0.6));
  z-index: -1; /*notre vaisseau se place derriere notre card, si c'est positif, alors devant*/
  animation: spaceship 6s infinite linear;
}
@keyframes spaceship {
  0% {
    top: 2%;
    left: 2%;
    transform: rotate(90deg);
  }
  10% {
    top: 6%;
    left: 30%;
    transform: rotate(90deg);
  }
  20% {
    top: 9%;
    left: 60%;
    transform: rotate(45deg);
  }
  30% {
    top: 0%;
    left: 80%;
    transform: rotate(90deg);
  }
  40% {
    top: 20%;
    left: 120%;
    transform: rotate(135deg);
  }
  50% {
    top: 50%;
    left: 80%;
    transform: rotate(-135deg);
  }
  60% {
    top: 90%;
    left: 90%;
    transform: rotate(-135deg);
  }
  70% {
    top: 110%;
    left: 50%;
    transform: rotate(-135deg);
  }
  80% {
    top: 85%;
    left: 30%;
    transform: rotate(-45deg);
  }
  90% {
    top: 50%;
    left: 15%;
    transform: rotate(-35deg);
  }
  100% {
    top: 2%;
    left: 2%;
    transform: rotate(90deg);
  }
}
